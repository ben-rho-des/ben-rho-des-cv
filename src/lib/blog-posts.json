[
  {
    "slug": "hello-world",
    "title": "Hello World: My First Blog Post",
    "date": "2024-01-15",
    "excerpt": "Welcome to my blog where I'll be sharing thoughts on frontend development, technology, and the human side of coding.",
    "tags": ["introduction", "frontend", "blog"],
    "content": "<h1>Hello World: My First Blog Post</h1><p>Welcome to my blog! I'm excited to start sharing my thoughts on frontend development, technology, and the human side of coding.</p><h2>What to Expect</h2><p>This blog will cover:</p><ul><li><strong>Frontend Development</strong>: React, TypeScript, performance tips</li><li><strong>Technology Philosophy</strong>: High tech, low life approach</li><li><strong>Human-Centered Design</strong>: Building interfaces that feel alive</li><li><strong>Random Musings</strong>: Because sometimes you need to think out loud</li></ul><h2>Why I'm Writing</h2><p>I believe in sharing knowledge and experiences. Every developer has unique insights, and I want to contribute to the community that has given me so much.</p><p>Stay tuned for more posts. I promise to keep them real, useful, and occasionally entertaining.</p><hr><p><em>Written with ❤️ and ☕</em></p>"
  },
  {
    "slug": "getting-started-with-svelte",
    "title": "Getting Started with Svelte: A Developer's Journey",
    "date": "2024-01-20",
    "excerpt": "My experience learning Svelte and why it's becoming my go-to framework for modern web development.",
    "tags": ["svelte", "frontend", "javascript", "tutorial"],
    "content": "<h1>Getting Started with Svelte: A Developer's Journey</h1><p>After years of working with React, Vue, and Angular, I decided to give Svelte a try. What I discovered completely changed my perspective on modern web development.</p><h2>Why Svelte?</h2><p>Svelte takes a fundamentally different approach to building user interfaces. Instead of shipping a framework to the browser, it compiles your components into vanilla JavaScript at build time. This results in:</p><ul><li><strong>Smaller bundle sizes</strong> - No framework runtime overhead</li><li><strong>Better performance</strong> - Direct DOM manipulation without virtual DOM</li><li><strong>Simpler mental model</strong> - Less abstraction, more direct control</li></ul><h2>My First Svelte Component</h2><pre><code>&lt;script&gt;\n  let count = 0;\n  \n  function increment() {\n    count += 1;\n  }\n&lt;/script&gt;\n\n&lt;button on:click={increment}&gt;\n  Clicked {count} times\n&lt;/button&gt;</code></pre><p>The beauty of Svelte is in its simplicity. No hooks, no complex state management patterns - just straightforward JavaScript that directly updates the DOM.</p><h2>The Learning Curve</h2><p>Coming from React, I had to unlearn some patterns:</p><ol><li><strong>State updates are synchronous</strong> - No need for <code>useState</code> or <code>setState</code></li><li><strong>Reactivity is built-in</strong> - Variables automatically trigger re-renders</li><li><strong>Less boilerplate</strong> - No need for <code>useEffect</code>, <code>useCallback</code>, etc.</li></ol><h2>Performance Benefits</h2><p>The performance gains were immediately noticeable:</p><ul><li><strong>First Contentful Paint</strong>: 20% faster</li><li><strong>Bundle size</strong>: 40% smaller</li><li><strong>Runtime performance</strong>: Significantly smoother animations</li></ul><h2>When to Use Svelte</h2><p>Svelte excels in these scenarios:</p><ul><li><strong>Small to medium applications</strong> - Perfect for portfolios, blogs, and business sites</li><li><strong>Performance-critical applications</strong> - Where every millisecond counts</li><li><strong>Teams new to modern frameworks</strong> - Easier learning curve than React</li></ul><h2>Conclusion</h2><p>Svelte has become my preferred choice for new projects. Its simplicity, performance, and developer experience make it an excellent framework for modern web development.</p><p>The future of frontend development is moving toward compile-time optimizations, and Svelte is leading the charge.</p><hr><p><em>What's your experience with Svelte? I'd love to hear your thoughts in the comments below.</em></p>"
  },
  {
    "slug": "css-grid-mastery",
    "title": "Mastering CSS Grid: From Basics to Advanced Layouts",
    "date": "2024-01-25",
    "excerpt": "A comprehensive guide to CSS Grid that will transform how you think about web layouts and responsive design.",
    "tags": ["css", "grid", "layout", "responsive", "frontend"],
    "content": "<h1>Mastering CSS Grid: From Basics to Advanced Layouts</h1><p>CSS Grid has revolutionized how we create web layouts. After years of struggling with floats, flexbox limitations, and complex positioning, Grid finally gives us the layout system we've always wanted.</p><h2>What Makes CSS Grid Special?</h2><p>CSS Grid is the first CSS layout system designed specifically for two-dimensional layouts. Unlike flexbox (which is primarily one-dimensional), Grid gives you control over both rows and columns simultaneously.</p><h2>Basic Grid Concepts</h2><h3>1. Grid Container and Items</h3><pre><code>.grid-container {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: auto auto;\n  gap: 1rem;\n}</code></pre><h3>2. The <code>fr</code> Unit</h3><p>The <code>fr</code> (fraction) unit is Grid's secret weapon:</p><pre><code>.grid {\n  grid-template-columns: 1fr 2fr 1fr; /* 1:2:1 ratio */\n}</code></pre><h3>3. Grid Areas</h3><p>Grid areas let you create semantic layouts:</p><pre><code>.page {\n  display: grid;\n  grid-template-areas: \n    \"header header header\"\n    \"sidebar main aside\"\n    \"footer footer footer\";\n  grid-template-columns: 200px 1fr 200px;\n  grid-template-rows: auto 1fr auto;\n}\n\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n.aside { grid-area: aside; }\n.footer { grid-area: footer; }</code></pre><h2>Responsive Grid Patterns</h2><h3>Auto-Fit vs Auto-Fill</h3><pre><code>/* Auto-fit: items expand to fill space */\n.grid-auto-fit {\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n}\n\n/* Auto-fill: maintains column count */\n.grid-auto-fill {\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n}</code></pre><h3>Mobile-First Grid</h3><pre><code>.grid {\n  display: grid;\n  grid-template-columns: 1fr; /* Single column on mobile */\n  gap: 1rem;\n}\n\n@media (min-width: 768px) {\n  .grid {\n    grid-template-columns: repeat(2, 1fr); /* Two columns on tablet */\n  }\n}\n\n@media (min-width: 1024px) {\n  .grid {\n    grid-template-columns: repeat(3, 1fr); /* Three columns on desktop */\n  }\n}</code></pre><h2>Advanced Grid Techniques</h2><h3>1. Subgrid (Modern Browsers)</h3><pre><code>.parent {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n}\n\n.child {\n  display: grid;\n  grid-template-columns: subgrid; /* Inherits parent's columns */\n}</code></pre><h3>2. Grid Masonry Effect</h3><pre><code>.masonry {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-auto-rows: 0;\n  grid-auto-flow: dense;\n}</code></pre><h3>3. Grid Animation</h3><pre><code>.grid-item {\n  transition: all 0.3s ease;\n}\n\n.grid-item:hover {\n  transform: scale(1.05);\n  z-index: 1;\n}</code></pre><h2>Real-World Examples</h2><h3>Portfolio Grid</h3><pre><code>.portfolio {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 2rem;\n  padding: 2rem;\n}</code></pre><h3>Dashboard Layout</h3><pre><code>.dashboard {\n  display: grid;\n  grid-template-areas: \n    \"header header\"\n    \"sidebar main\"\n    \"footer footer\";\n  grid-template-columns: 250px 1fr;\n  grid-template-rows: 60px 1fr 60px;\n  height: 100vh;\n}</code></pre><h2>Browser Support and Fallbacks</h2><p>CSS Grid is supported in all modern browsers, but for older browsers:</p><pre><code>.grid {\n  display: flex; /* Fallback */\n  flex-wrap: wrap;\n}\n\n@supports (display: grid) {\n  .grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  }\n}</code></pre><h2>Performance Considerations</h2><ul><li><strong>Grid is GPU-accelerated</strong> - Excellent for animations</li><li><strong>Minimal reflow</strong> - Layout calculations are optimized</li><li><strong>Efficient repaints</strong> - Only changed areas are redrawn</li></ul><h2>Conclusion</h2><p>CSS Grid has fundamentally changed how I approach web layouts. It's not just another CSS property—it's a complete paradigm shift that makes complex layouts simple and responsive design intuitive.</p><p>The key is to start simple and gradually build complexity. Grid's declarative nature means you can often achieve in a few lines what used to require complex JavaScript calculations.</p><hr><p><em>Ready to dive deeper into CSS Grid? Check out my upcoming posts on advanced Grid techniques and real-world applications.</em></p>"
  }
]
